/**
 * @file Firestore Security Rules for DNA Cosmic Explorer
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for DNA analyses
 * and limits write access to gene and space research data.
 *
 * @data_structure
 * - /genes/{geneId}: Stores gene data, publicly readable, admin-writable.
 * - /users/{userId}/dna_analyses/{analysisId}: Stores DNA analysis data, user-owned.
 * - /space_research/{studyId}: Stores space research data, publicly readable, admin-writable.
 *
 * @key_security_decisions
 * - Users can only create, read, update, and delete their own DNA analyses.
 * - Listing of DNA analyses is restricted to the owning user.
 * - Gene and space research data are read-only for non-admin users.
 *
 * @denormalization_for_authorization
 * - DNA analyses include a `userId` field to enable ownership checks without `get()` calls.
 *
 * @structural_segregation
 * - User-specific DNA analyses are stored in a dedicated subcollection under `/users/{userId}`
 * to simplify access control and improve query performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants read access to genes for all authenticated users and denies write access.
     * @path /genes/{geneId}
     * @allow (get, list) User is authenticated.
     * @deny (create, update, delete) Any user.
     * @principle Read access is public for authenticated users, write access is restricted (admin-only).
     */
    match /genes/{geneId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces user-ownership for DNA analyses.
     * @path /users/{userId}/dna_analyses/{analysisId}
     * @allow (create) User is authenticated and userId in path is equal to authenticated user ID.
     * @allow (get, list, update, delete) User is authenticated and userId in path is equal to authenticated user ID.
     * @deny (create) User is authenticated, but userId in path is not equal to authenticated user ID.
     * @deny (get, list, update, delete) User is authenticated, but userId in path is not equal to authenticated user ID.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree,
     * and validates relational integrity between the path and the document's internal `userId` field.
     */
    match /users/{userId}/dna_analyses/{analysisId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants read access to space research data for all authenticated users and denies write access.
     * @path /space_research/{studyId}
     * @allow (get, list) User is authenticated.
     * @deny (create, update, delete) Any user.
     * @principle Read access is public for authenticated users, write access is restricted (admin-only).
     */
    match /space_research/{studyId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // ----- Helper functions -----
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}